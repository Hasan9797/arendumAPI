generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  fullName  String   @map("full_name")
  phone     String   @unique
  role      Int      @default(1)
  login     String   @unique
  password  String
  img       String?
  status    Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Driver {
  id                      Int        @id @default(autoincrement())
  fullName                String?    @map("full_name")
  phone                   String     @unique
  machineId               Int?       @map("machine_id")
  email                   String?    @unique
  img                     String?
  status                  Int        @default(0)
  photoTexPassport        Json       @default("[]") @map("photo_tex_passport")
  photoPassport           Json       @default("[]") @map("photo_passport")
  photoLicense            Json       @default("[]") @map("photo_license")
  photoConfidencePassport Json       @default("[]") @map("photo_confidence_passport")
  photoDriverLicense      Json       @default("[]") @map("photo_driver_license")
  photoCar                Json       @default("[]") @map("photo_car")
  params                  Json       @default("[]") @map("params")
  long                    Decimal?   @default(0)
  lat                     Decimal?   @default(0)
  machineColor            String?
  machineNumber           String?
  companyName             String?    @map("company_name")
  companyInn              String?    @map("company_inn")
  legal                   Boolean    @default(false)
  merchantId              Int?       @map("merchant_id")
  machine                 Machines?  @relation("MachineDrivers", fields: [machineId], references: [id])
  // relation
  regionId                Int?       @map("region_id")
  region                  Region?    @relation("DriverRegion", fields: [regionId], references: [id])
  // relation
  structureId             Int?       @map("structure_id")
  structure               Structure? @relation("DriverStructure", fields: [structureId], references: [id])

  fcmToken  String?    @map("fcm_token")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  order     Order[] // cambleCase 
  cards     BankCard[] //cambleCase
}

model Client {
  id          Int        @id @default(autoincrement())
  fullName    String?    @map("full_name")
  phone       String     @unique
  legal       Boolean    @default(false)
  email       String?    @unique
  img         String?
  status      Int        @default(0)
  long        Decimal?   @default(0)
  lat         Decimal?   @default(0)
  fcmToken    String?    @map("fcm_token")
  // relation
  regionId    Int?       @map("region_id")
  region      Region?    @relation("ClientRegion", fields: [regionId], references: [id])
  // relation
  structureId Int?       @map("structure_id")
  structure   Structure? @relation("ClientStructures", fields: [structureId], references: [id])
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  order       Order[]    @relation("ClientOrder") // cambleCase
  cards       BankCard[]
}

model Machines {
  id                   Int                    @id @default(autoincrement())
  name                 String?                @map("name")
  nameUz               String                 @map("name_uz")
  nameRu               String                 @map("name_ru")
  nameEn               String?                @map("name_en")
  img                  String?
  status               Int                    @default(0)
  machineParams        MachineParams[]        @relation("MachineParams")
  machineParamsFilters MachineParamsFilters[] @relation("MachineParamsFilters")
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  drivers              Driver[]               @relation("MachineDrivers")
  order                Order[] // cambleCase
  machinePrice         MachinePrice[] // cambleCase
}

model MachineParams {
  id        Int      @id @default(autoincrement())
  name      String?  @map("name")
  nameUz    String   @map("name_uz")
  nameRu    String   @map("name_ru")
  nameEn    String?  @map("name_en")
  key       String?
  prefix    String?
  // relation
  machineId Int      @map("machine_id")
  machines  Machines @relation("MachineParams", fields: [machineId], references: [id])
  status    Int      @default(0)
  params    Json     @default("[]")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model MachineParamsFilters {
  id           Int      @id @default(autoincrement())
  // relation
  machineId    Int      @map("machine_id")
  machines     Machines @relation("MachineParamsFilters", fields: [machineId], references: [id])
  filterParams Json     @default("[]") @map("filter_params")
  status       Int      @default(0)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
}

model BankCard {
  id         Int     @id @default(autoincrement())
  cardId     Int     @map("card_id")
  pan        String
  expiry     String
  cardHolder String? @map("card_holder")
  // relation
  clientId   Int?    @map("client_id")
  client     Client? @relation(fields: [clientId], references: [id])
  // relation
  driverId   Int?    @map("driver_id")
  driver     Driver? @relation(fields: [driverId], references: [id])

  balance   Int?
  phone     String?
  cardToken String   @map("card_token")
  status    Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model UserToken {
  id        Int      @id @default(autoincrement())
  token     String
  expire    String
  userId    Int      @map("user_id")
  status    Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Merchant {
  id        Int      @id @default(autoincrement())
  fullName  String   @map("full_name")
  phone     String   @unique
  inn       String?
  status    Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Region {
  id         Int         @id @default(autoincrement())
  name       String?     @map("name")
  nameUz     String      @map("name_uz")
  nameRu     String      @map("name_ru")
  nameEn     String?     @map("name_en")
  status     Int         @default(1)
  structures Structure[] @relation("RegionStructures")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  driver     Driver[]    @relation("DriverRegion") // cambleCase
  client     Client[]    @relation("ClientRegion") // cambleCase
}

model Structure {
  id        Int      @id @default(autoincrement())
  name      String?  @map("name")
  nameUz    String   @map("name_uz")
  nameRu    String   @map("name_ru")
  nameEn    String?  @map("name_en")
  status    Int      @default(1)
  // relation
  regionId  Int      @map("region_id")
  region    Region?  @relation("RegionStructures", fields: [regionId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  client    Client[] @relation("ClientStructures") // cambleCase
  driver    Driver[] @relation("DriverStructure") // cambleCase
}

model Order {
  id                Int          @id @default(autoincrement())
  //relation
  clientId          Int          @map("client_id")
  client            Client       @relation("ClientOrder", fields: [clientId], references: [id])
  // relation
  driverId          Int?         @map("driver_id")
  driver            Driver?      @relation(fields: [driverId], references: [id])
  // relation
  machineId         Int?         @map("machine_id")
  machine           Machines?    @relation(fields: [machineId], references: [id])
  amount            Int
  amountType        Int          @default(1) @map("amount_type")
  status            Int          @default(1)
  driverArrivedTime String?      @map("driver_arrived_time")
  startHour         String?      @map("start_hour")
  endHour           String?      @map("end_hour")
  totalWorkHour     Int?         @map("total_work_hour")
  totalWorkMinut    Int?         @map("total_work_minut")
  totalPauseHour    Int?         @map("total_pause_hour")
  totalPauseMinut   Int?         @map("total_pause_minut")
  paidWaitingTime   String?      @map("paid_waiting_time")
  paidWaitingAmount Int?         @map("paid_waiting_amount")
  hourCount         Int?         @map("hour_count")
  kmCount           Int?         @map("km_count")
  totalAmount       Int?         @map("total_amount")
  type              String
  count             Int          @default(1)
  params            Json         @default("[]") @map("params")
  long              String?
  lat               String?
  address           String?
  timeIsContinue    Boolean      @default(false) @map("time_is_continue")
  structureId       Int          @default(0) @map("structure_id")
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  orderPause        OrderPause[] // cambleCase

  // âœ… Individual indekslar
  @@index([status])
  @@index([structureId])
  @@index([clientId])
  @@index([driverId])
}

model OrderPause {
  id         Int      @id @default(autoincrement())
  orderId    Int      @map("order_id")
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  startPause String   @map("start_pause")
  endPause   String?  @map("end_pause")
  totalTime  String?  @map("total_time")
  status     Boolean  @default(true)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
}

model MachinePrice {
  id                 Int                  @id @default(autoincrement())
  machineId          Int                  @map("machine_id")
  // relation
  machines           Machines             @relation(fields: [machineId], references: [id])
  minAmount          Int?                 @map("min_amount")
  minimum            Int?                 @map("minimum")
  priceMode          String               @default("hour") @map("price_mode")
  status             Int                  @default(0)
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  machinePriceParams MachinePriceParams[] @relation("MachinePriceParams")
}

model MachinePriceParams {
  id             Int          @id @default(autoincrement())
  parameter      Int?         @map("parameter")
  parameterName  String       @map("parameter_name")
  unit           String       @map("unit")
  type           String       @map("type")
  // relation
  machinePriceId Int          @map("machine_price_id")
  machinePrice   MachinePrice @relation("MachinePriceParams", fields: [machinePriceId], references: [id], onDelete: Cascade)
  status         Int          @default(0)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
}

model UsersBalance {
  id      Int    @id @default(autoincrement())
  userId  Int    @map("user_id")
  balance String
}

// model Transaction {
//   id       Int @id @default(autoincrement())
//   orderId  Int @map("order_id")
//   clientId Int @map("client_id")
//   driverId Int @map("driver_id")
//   amount   Int
// }
